Arena::SetNodeValue(pDevice->GetNodeMap(), "PtpEnable", true);

Arena::SetNodeValue(pDevice->GetNodeMap(), "PtpSlaveOnly", false);
std::string currPtpStatus = Arena::GetNodeValue(pDevice->GetNodeMap(), "PtpStatus");
	while (currPtpStatus != "Master");

Arena::SetNodeValue(pDevice->GetNodeMap(), "PtpSlaveOnly", true);	
std::string currPtpStatus = Arena::GetNodeValue(pDevice->GetNodeMap(), "PtpStatus");
while (currPtpStatus != "Slave");

Arena::SetNodeValue(pDevice->GetNodeMap(), "TransferControlMode", "UserControlled");
Arena::SetNodeValue(pDevice->GetNodeMap(), "TransferOperationMode", "Continuous");
Arena::ExecuteNode(pDevice->GetNodeMap(), "TransferStop");

Arena::SetNodeValue(pDevice->GetNodeMap(), "ActionUnconditionalMode", "On");
Arena::SetNodeValue(pDevice->GetNodeMap(), "ActionSelector", 0);
Arena::SetNodeValue(pDevice->GetNodeMap(), "ActionDeviceKey", g_action_device_key);
Arena::SetNodeValue(pDevice->GetNodeMap(), "ActionGroupKey", g_action_group_key);
Arena::SetNodeValue(pDevice->GetNodeMap(), "ActionGroupMask", g_action_device_key);

// Get the curent PTP timestamp from the Master camera
	Arena::ExecuteNode(g_camEntries[0]->pCam->GetNodeMap(), "PtpDataSetLatch");
int64_t curr_ptp = Arena::GetNodeValue(g_camEntries[0]->pCam->GetNodeMap(), "PtpDataSetLatchValue");
// Round up to the nearest second
	if (g_round_up_action_time)
	{
		curr_ptp /= 1000000000;
		curr_ptp += static_cast(g_action_delta_time) + 1;
		curr_ptp *= 1000000000;
	}
	else
	{
		curr_ptp += static_cast(g_action_delta_time) * 1000000000;
	}
// Fire an Action Command g_action_delta_time seconds from now
std::cout << TAB2 << "Scheduled Action Command set for time: " << curr_ptp << " ns" << std::endl;

Arena::SetNodeValue(pSystem->GetTLSystemNodeMap(), "ActionCommandExecuteTime", curr_ptp);

	Arena::ExecuteNode(pSystem->GetTLSystemNodeMap(), "ActionCommandFireCommand");

// Transfer images to host
	Arena::ExecuteNode(g_camEntries[x]->pCam->GetNodeMap(), "TransferStart");

	// Wait for 2 * g_action_delta_time in seconds
	pImage = g_camEntries[x]->pCam->GetImage(g_action_delta_time * 1000 * 2);

	Arena::ExecuteNode(g_camEntries[x]->pCam->GetNodeMap(), "TransferStop");

